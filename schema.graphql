### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Addmenual {
  contents: String
  id: Int!
  userId: Int
}

input AddmenualListRelationFilter {
  every: AddmenualWhereInput
  none: AddmenualWhereInput
  some: AddmenualWhereInput
}

input AddmenualWhereInput {
  AND: [AddmenualWhereInput!]
  contents: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [AddmenualWhereInput!]
  OR: [AddmenualWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input AddmenualWhereUniqueInput {
  id: Int
}

type Adminbasicmall {
  active: Boolean
  country: String
  id: Int!
  monthlyfee: String
  platform: String
  selleramount: String
  settingfee: String
  translatefee: String
}

input AdminbasicmallListRelationFilter {
  every: AdminbasicmallWhereInput
  none: AdminbasicmallWhereInput
  some: AdminbasicmallWhereInput
}

input AdminbasicmallWhereInput {
  active: BoolNullableFilter
  AND: [AdminbasicmallWhereInput!]
  country: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  monthlyfee: StringNullableFilter
  NOT: [AdminbasicmallWhereInput!]
  OR: [AdminbasicmallWhereInput!]
  platform: StringNullableFilter
  selleramount: StringNullableFilter
  settingfee: StringNullableFilter
  translatefee: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input AdminbasicmallWhereUniqueInput {
  id: Int
}

type Adminbasicplan {
  active: Boolean
  id: Int!
  monthlycollecting: String
  monthlyplanfee: String
  plan: String
  productamount: String
  productmanagingamount: String
  settingfee: String
  translatefee: String
  update: String
}

input AdminbasicplanListRelationFilter {
  every: AdminbasicplanWhereInput
  none: AdminbasicplanWhereInput
  some: AdminbasicplanWhereInput
}

input AdminbasicplanWhereInput {
  active: BoolNullableFilter
  AND: [AdminbasicplanWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  monthlycollecting: StringNullableFilter
  monthlyplanfee: StringNullableFilter
  NOT: [AdminbasicplanWhereInput!]
  OR: [AdminbasicplanWhereInput!]
  plan: StringNullableFilter
  productamount: StringNullableFilter
  productmanagingamount: StringNullableFilter
  settingfee: StringNullableFilter
  translatefee: StringNullableFilter
  update: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input AdminbasicplanWhereUniqueInput {
  id: Int
}

type Admincollectcategory {
  active: Boolean
  first: String
  id: Int!
  message: String
  order: String
  second: String
}

input AdmincollectcategoryListRelationFilter {
  every: AdmincollectcategoryWhereInput
  none: AdmincollectcategoryWhereInput
  some: AdmincollectcategoryWhereInput
}

input AdmincollectcategoryWhereInput {
  active: BoolNullableFilter
  AND: [AdmincollectcategoryWhereInput!]
  createdAt: DateTimeFilter
  first: StringNullableFilter
  id: IntFilter
  message: StringNullableFilter
  NOT: [AdmincollectcategoryWhereInput!]
  OR: [AdmincollectcategoryWhereInput!]
  order: StringNullableFilter
  second: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input AdmincollectcategoryWhereUniqueInput {
  id: Int
}

type Admincollectmarket {
  active: Boolean
  country: String
  id: Int!
  image: String
  market: String
  productamount: String
  userId: Int
}

input AdmincollectmarketListRelationFilter {
  every: AdmincollectmarketWhereInput
  none: AdmincollectmarketWhereInput
  some: AdmincollectmarketWhereInput
}

input AdmincollectmarketWhereInput {
  active: BoolNullableFilter
  AND: [AdmincollectmarketWhereInput!]
  country: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  image: StringNullableFilter
  market: StringNullableFilter
  NOT: [AdmincollectmarketWhereInput!]
  OR: [AdmincollectmarketWhereInput!]
  productamount: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input AdmincollectmarketWhereUniqueInput {
  id: Int
}

type Admincollectnation {
  active: Boolean
  country: String
  id: Int!
  image: String
  market: String
  productamount: String
  userId: Int
}

input AdmincollectnationListRelationFilter {
  every: AdmincollectnationWhereInput
  none: AdmincollectnationWhereInput
  some: AdmincollectnationWhereInput
}

input AdmincollectnationWhereInput {
  active: BoolNullableFilter
  AND: [AdmincollectnationWhereInput!]
  country: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  image: StringNullableFilter
  market: StringNullableFilter
  NOT: [AdmincollectnationWhereInput!]
  OR: [AdmincollectnationWhereInput!]
  productamount: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input AdmincollectnationWhereUniqueInput {
  id: Int
}

type Admincommissionfee {
  country: String
  fee: String
  id: Int!
  market: String
}

input AdmincommissionfeeListRelationFilter {
  every: AdmincommissionfeeWhereInput
  none: AdmincommissionfeeWhereInput
  some: AdmincommissionfeeWhereInput
}

input AdmincommissionfeeWhereInput {
  AND: [AdmincommissionfeeWhereInput!]
  country: StringNullableFilter
  createdAt: DateTimeFilter
  fee: StringNullableFilter
  id: IntFilter
  market: StringNullableFilter
  NOT: [AdmincommissionfeeWhereInput!]
  OR: [AdmincommissionfeeWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input AdmincommissionfeeWhereUniqueInput {
  id: Int
}

type Admincommissionmarket {
  country: String
  fee: String
  id: Int!
  market: String
}

input AdmincommissionmarketListRelationFilter {
  every: AdmincommissionmarketWhereInput
  none: AdmincommissionmarketWhereInput
  some: AdmincommissionmarketWhereInput
}

input AdmincommissionmarketWhereInput {
  AND: [AdmincommissionmarketWhereInput!]
  country: StringNullableFilter
  createdAt: DateTimeFilter
  fee: StringNullableFilter
  id: IntFilter
  market: StringNullableFilter
  NOT: [AdmincommissionmarketWhereInput!]
  OR: [AdmincommissionmarketWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input AdmincommissionmarketWhereUniqueInput {
  id: Int
}

type Admincommissiontransfer {
  country: String
  fee: String
  id: Int!
  market: String
}

input AdmincommissiontransferListRelationFilter {
  every: AdmincommissiontransferWhereInput
  none: AdmincommissiontransferWhereInput
  some: AdmincommissiontransferWhereInput
}

input AdmincommissiontransferWhereInput {
  AND: [AdmincommissiontransferWhereInput!]
  country: StringNullableFilter
  createdAt: DateTimeFilter
  fee: StringNullableFilter
  id: IntFilter
  market: StringNullableFilter
  NOT: [AdmincommissiontransferWhereInput!]
  OR: [AdmincommissiontransferWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input AdmincommissiontransferWhereUniqueInput {
  id: Int
}

type Adminoptionfee {
  active: Boolean
  id: Int!
  indexid: Int!
  modelsort: String
  price: String
  productamount: String
  promotion: String
}

input AdminoptionfeeListRelationFilter {
  every: AdminoptionfeeWhereInput
  none: AdminoptionfeeWhereInput
  some: AdminoptionfeeWhereInput
}

input AdminoptionfeeWhereInput {
  active: BoolNullableFilter
  AND: [AdminoptionfeeWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  indexid: IntFilter
  modelsort: StringNullableFilter
  NOT: [AdminoptionfeeWhereInput!]
  OR: [AdminoptionfeeWhereInput!]
  price: StringNullableFilter
  productamount: StringNullableFilter
  promotion: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input AdminoptionfeeWhereUniqueInput {
  id: Int
}

type Adminsellerfiltering {
  contents: String
  country: String
  id: Int!
  market: String
  userId: Int
}

input AdminsellerfilteringListRelationFilter {
  every: AdminsellerfilteringWhereInput
  none: AdminsellerfilteringWhereInput
  some: AdminsellerfilteringWhereInput
}

input AdminsellerfilteringWhereInput {
  AND: [AdminsellerfilteringWhereInput!]
  contents: StringNullableFilter
  country: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  market: StringNullableFilter
  NOT: [AdminsellerfilteringWhereInput!]
  OR: [AdminsellerfilteringWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input AdminsellerfilteringWhereUniqueInput {
  id: Int
}

type AuthPayload {
  token: String
  user: User
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

type Changepoint {
  checkstatus: String
  createdAt: DateTime!
  id: Int!
  price: String
  User: User
}

input ChangepointListRelationFilter {
  every: ChangepointWhereInput
  none: ChangepointWhereInput
  some: ChangepointWhereInput
}

input ChangepointWhereInput {
  AND: [ChangepointWhereInput!]
  checkstatus: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [ChangepointWhereInput!]
  OR: [ChangepointWhereInput!]
  price: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input ChangepointWhereUniqueInput {
  id: Int
}

type Checkpoint {
  checkstatus: String
  createdAt: DateTime!
  id: Int!
  image: String
  marketname: String
  price: String
  User: User
}

input CheckpointListRelationFilter {
  every: CheckpointWhereInput
  none: CheckpointWhereInput
  some: CheckpointWhereInput
}

input CheckpointWhereInput {
  AND: [CheckpointWhereInput!]
  checkstatus: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  image: StringNullableFilter
  marketname: StringNullableFilter
  NOT: [CheckpointWhereInput!]
  OR: [CheckpointWhereInput!]
  price: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input CheckpointWhereUniqueInput {
  id: Int
}

type Comment {
  Comment: Comment
  commentId: Int
  content: String
  createdAt: DateTime!
  id: Int!
  User: User
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  Comment: CommentWhereInput
  commentId: IntNullableFilter
  comments: CommentListRelationFilter
  content: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  Tweet: TweetWhereInput
  tweetId: IntNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input CommentWhereUniqueInput {
  id: Int
}

type Connectinfo {
  access_token: String
  apiid: String
  apikey: String
  code: String
  expires_in: Int
  id: Int!
  refresh_expires_in: Int
  refresh_token: String
  shop: String
  shopid: String
  User: User
  userId: Int
}

input ConnectinfoListRelationFilter {
  every: ConnectinfoWhereInput
  none: ConnectinfoWhereInput
  some: ConnectinfoWhereInput
}

input ConnectinfoWhereInput {
  access_token: StringNullableFilter
  AND: [ConnectinfoWhereInput!]
  apiid: StringNullableFilter
  apikey: StringNullableFilter
  code: StringNullableFilter
  createdAt: DateTimeFilter
  expires_in: IntNullableFilter
  id: IntFilter
  NOT: [ConnectinfoWhereInput!]
  OR: [ConnectinfoWhereInput!]
  refresh_expires_in: IntNullableFilter
  refresh_token: StringNullableFilter
  shop: StringNullableFilter
  shopid: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input ConnectinfoWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Deliveryfee {
  cntojp: String
  cntokor: String
  id: Int!
  indexid: Int
  jptocn: String
  jptokor: String
  jptomal: String
  kortocn: String
  kortojp: String
  kortomal: String
  ustocn: String
  ustojp: String
  ustokor: String
  ustomal: String
}

input DeliveryfeeListRelationFilter {
  every: DeliveryfeeWhereInput
  none: DeliveryfeeWhereInput
  some: DeliveryfeeWhereInput
}

input DeliveryfeeWhereInput {
  AND: [DeliveryfeeWhereInput!]
  cntojp: StringNullableFilter
  cntokor: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  indexid: IntNullableFilter
  jptocn: StringNullableFilter
  jptokor: StringNullableFilter
  jptomal: StringNullableFilter
  kortocn: StringNullableFilter
  kortojp: StringNullableFilter
  kortomal: StringNullableFilter
  NOT: [DeliveryfeeWhereInput!]
  OR: [DeliveryfeeWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
  ustocn: StringNullableFilter
  ustojp: StringNullableFilter
  ustokor: StringNullableFilter
  ustomal: StringNullableFilter
}

input DeliveryfeeWhereUniqueInput {
  id: Int
}

type Deliverymangeitems {
  created_at: String
  createdAt: DateTime!
  currency: String
  id: Int!
  item_price: String
  name: String
  paid_price: String
  product_main_image: String
  shipping_amount: String
  updated_at: String
  User: User
  userId: Int
}

input DeliverymangeitemsListRelationFilter {
  every: DeliverymangeitemsWhereInput
  none: DeliverymangeitemsWhereInput
  some: DeliverymangeitemsWhereInput
}

input DeliverymangeitemsWhereInput {
  AND: [DeliverymangeitemsWhereInput!]
  created_at: StringNullableFilter
  createdAt: DateTimeFilter
  currency: StringNullableFilter
  id: IntFilter
  item_price: StringNullableFilter
  name: StringNullableFilter
  NOT: [DeliverymangeitemsWhereInput!]
  OR: [DeliverymangeitemsWhereInput!]
  paid_price: StringNullableFilter
  product_main_image: StringNullableFilter
  shipping_amount: StringNullableFilter
  updated_at: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input DeliverymangeitemsWhereUniqueInput {
  id: Int
}

type Demandpoint {
  bankaccount: String
  checkname: String
  checkstatus: String
  confirmAt: String
  createdAt: DateTime!
  id: Int!
  image: String
  price: String
}

type ExchangeRate {
  cntojp: String
  cntokor: String
  id: Int!
  indexid: Int
  jptocn: String
  jptokor: String
  jptomal: String
  kortocn: String
  kortojp: String
  kortomal: String
  User: User
  ustocn: String
  ustojp: String
  ustokor: String
  ustomal: String
}

input ExchangeRateListRelationFilter {
  every: ExchangeRateWhereInput
  none: ExchangeRateWhereInput
  some: ExchangeRateWhereInput
}

input ExchangeRateWhereInput {
  AND: [ExchangeRateWhereInput!]
  cntojp: StringNullableFilter
  cntokor: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  indexid: IntNullableFilter
  jptocn: StringNullableFilter
  jptokor: StringNullableFilter
  jptomal: StringNullableFilter
  kortocn: StringNullableFilter
  kortojp: StringNullableFilter
  kortomal: StringNullableFilter
  NOT: [ExchangeRateWhereInput!]
  OR: [ExchangeRateWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
  ustocn: StringNullableFilter
  ustojp: StringNullableFilter
  ustokor: StringNullableFilter
  ustomal: StringNullableFilter
}

input ExchangeRateWhereUniqueInput {
  id: Int
}

type Filtering {
  contents: String
  country: String
  id: Int!
  market: String
  userId: Int
}

input FilteringListRelationFilter {
  every: FilteringWhereInput
  none: FilteringWhereInput
  some: FilteringWhereInput
}

input FilteringWhereInput {
  AND: [FilteringWhereInput!]
  contents: StringNullableFilter
  country: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  market: StringNullableFilter
  NOT: [FilteringWhereInput!]
  OR: [FilteringWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input FilteringWhereUniqueInput {
  id: Int
}

type Findattribute {
  advanced: lazadaAttributeAdvanced
  attribute_type: String
  input_type: String
  is_mandatory: Int
  is_sale_prop: Int
  label: String
  name: String
  options: [lazadaAttributeOptions]
}

type Findcategory {
  categoryList: String
}

type Following {
  avatar: String!
  followId: Int!
  id: Int!
  name: String!
  User: User
}

input FollowingListRelationFilter {
  every: FollowingWhereInput
  none: FollowingWhereInput
  some: FollowingWhereInput
}

input FollowingWhereInput {
  AND: [FollowingWhereInput!]
  avatar: StringFilter
  followId: IntFilter
  id: IntFilter
  name: StringFilter
  NOT: [FollowingWhereInput!]
  OR: [FollowingWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input FollowingWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type lazadaAttributeAdvanced {
  is_key_prop: Int
}

type lazadaAttributeOptions {
  name: String
}

type LikedTweet {
  id: Int!
  likedAt: DateTime!
  tweet: Tweet!
}

input LikedTweetListRelationFilter {
  every: LikedTweetWhereInput
  none: LikedTweetWhereInput
  some: LikedTweetWhereInput
}

input LikedTweetWhereInput {
  AND: [LikedTweetWhereInput!]
  id: IntFilter
  likedAt: DateTimeFilter
  NOT: [LikedTweetWhereInput!]
  OR: [LikedTweetWhereInput!]
  tweet: TweetWhereInput
  tweetId: IntFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input LikedTweetWhereUniqueInput {
  id: Int
}

type Maxiplan {
  createdAt: DateTime!
  id: Int!
  malls: String!
  monthlycollecting: String!
  monthlyplanfee: String!
  monthlyplatformsfee: String!
  plan: String!
  platformsettingprice: String!
  productamount: String!
  productmanagingamount: String!
  settingfee: String!
  translatefee: String!
  update: String!
}

input MaxiplanListRelationFilter {
  every: MaxiplanWhereInput
  none: MaxiplanWhereInput
  some: MaxiplanWhereInput
}

input MaxiplanWhereInput {
  AND: [MaxiplanWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  malls: StringFilter
  monthlycollecting: StringFilter
  monthlyplanfee: StringFilter
  monthlyplatformsfee: StringFilter
  NOT: [MaxiplanWhereInput!]
  OR: [MaxiplanWhereInput!]
  plan: StringFilter
  platformsettingprice: StringFilter
  productamount: StringFilter
  productmanagingamount: StringFilter
  settingfee: StringFilter
  translatefee: StringFilter
  update: StringFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input MaxiplanWhereUniqueInput {
  id: Int
}

type Mutation {
  createAddmenual(contents: String): Addmenual
  createAdminbasicmall(active: Boolean, country: String, monthlyfee: String, platform: String, selleramount: String, settingfee: String, translatefee: String): Adminbasicmall
  createAdminbasicplan(active: Boolean, monthlycollecting: String, monthlyplanfee: String, plan: String, productamount: String, productmanagingamount: String, settingfee: String, translatefee: String, update: String): Adminbasicplan
  createAdmincollectcategory(active: Boolean, first: String, message: String, order: String, second: String): Admincollectcategory
  createAdmincollectmarket(active: Boolean, country: String, image: String, market: String, productamount: String, userId: Int): Admincollectmarket
  createAdmincollectnation(active: Boolean, country: String, image: String, market: String, productamount: String): Admincollectnation
  createAdmincommissionfee(country: String, fee: String, market: String): Admincommissionfee
  createAdmincommissionmarket(country: String, fee: String, market: String): Admincommissionmarket
  createAdmincommissiontransfer(country: String, fee: String, market: String): Admincommissiontransfer
  createAdminoptionfee(active: Boolean, indexid: Int, modelsort: String, price: String, productamount: String, promotion: String): Adminoptionfee
  createAdminsellerfiltering(contents: String, country: String, market: String): Adminsellerfiltering
  createChangepoint(checkstatus: String, price: String): Changepoint
  createCheckpoint(checkstatus: String, image: String, marketname: String, price: String): Checkpoint
  createComment(content: String!, id: Int!): Comment
  createDeliveryfee(cntojp: String, cntokor: String, indexid: Int, jptocn: String, jptokor: String, jptomal: String, kortocn: String, kortojp: String, kortomal: String, ustocn: String, ustojp: String, ustokor: String, ustomal: String): Deliveryfee
  createDeliverymangeitemst(created_at: String, currency: String, item_price: String, name: String, paid_price: String, product_main_image: String, shipping_amount: String, updated_at: String): Deliverymangeitems
  createDemandpoint(bankaccount: String, checkname: String, checkstatus: String, image: String, price: String): Demandpoint
  createExchangeRate(cntojp: String, cntokor: String, indexid: Int, jptocn: String, jptokor: String, jptomal: String, kortocn: String, kortojp: String, kortomal: String, ustocn: String, ustojp: String, ustokor: String, ustomal: String): ExchangeRate
  createFiltering(contents: String, country: String, market: String): Filtering
  createMaxiplan(malls: String, monthlycollecting: String, monthlyplanfee: String, monthlyplatformsfee: String, plan: String, platformsettingprice: String, productamount: String, productmanagingamount: String, settingfee: String, translatefee: String, update: String): Maxiplan
  createOrder(item_price: String, keepingamount: String, multiorder: String, name: String, paidstatus: String, product_main_image: String, productid: Int, shipping_amount: String, updated_at: String, wholeamount: String): Ordermanageitems
  createPaidorderlist(category: String, discount: String, id: Int, images: String, keepingamount: String, orderstatus: String, price: String, productid: Int, shipping_amount: String, title: String, updated_at: String, userId: Int, wholeamount: String): Paidproductlist
  createPrivacypolicy(contents: String): Privacypolicy
  createProduct(brand: String, category: String, description: String, discount: Int, images: String, newproduct: String, price: Int, productpageId: Int, sale: String, stock: String, title: String, type: String, userId: Int, variants: String): Product
  createProductupdate(postfix: String, prefix: String): Productupdate
  createProfile(avatar: String, bio: String, location: String, website: String): Profile
  createRefundpolicy(contents: String): Refundpolicy
  createReply(commentId: Int, content: String!, id: Int!): Comment
  createSellingprice(mallname: String, price: String): Sellingprice
  createStockhandling(indexid: Int, name: String, price: String, productfrom: String, productto: String, stock: String, stockdemand: String, stockimage: String, widthrowdemand: String): Stockhandling
  createSubid(subid: String): Subid
  createTermsanduse(contents: String): Termsanduse
  createTweet(content: String): Tweet
  createUserProfile(bankaccount: String, bankname: String, businessnumber: String, contactemail: String, deposit: String, gsiid: String, kakaoid: String, point: String): UserProfile
  createUserProfiledepost(deposit: String): UserProfile
  deleteAdminbasicmall(id: Int): Adminbasicmall
  deleteAdminbasicplan(id: Int): Adminbasicplan
  deleteAdmincollectmarket(id: Int): Admincollectmarket
  deleteAdmincollectnation(id: Int): Admincollectnation
  deleteAdmincommissionfee(id: Int): Admincommissionfee
  deleteAdmincommissionmarket(id: Int): Admincommissionmarket
  deleteAdmincommissiontransfer(id: Int): Admincommissiontransfer
  deleteAdminoptionfee(id: Int): Adminoptionfee
  deleteDeliverymangeitems(id: Int): Deliverymangeitems
  deleteFollow(id: Int!): Following
  deleteLike(id: Int!): LikedTweet
  deleteStockhandling(id: Int): Stockhandling
  follow(avatar: String!, followId: Int!, name: String!): Following
  likeTweet(id: Int): LikedTweet
  login(email: String!, password: String!): AuthPayload
  productpagemutation(id: Int): Productpage
  resetpassword(email: String!): AuthPayload
  signup(email: String, name: String, password: String, phonenumber: String): AuthPayload
  updateAdminbasicmalln(active: Boolean, country: String, id: Int, monthlyfee: String, platform: String, selleramount: String, settingfee: String, translatefee: String): Adminbasicmall
  updateAdminbasicplan(active: Boolean, id: Int, monthlycollecting: String, monthlyplanfee: String, plan: String, productamount: String, productmanagingamount: String, settingfee: String, translatefee: String, update: String): Adminbasicplan
  updateAdmincollectcategory(active: Boolean, first: String, id: Int, message: String, order: String, second: String): Admincollectcategory
  updateAdmincommissionfee(fee: String, id: Int): Admincommissionfee
  updateAdmincommissionmarket(fee: String, id: Int): Admincommissionmarket
  updateAdmincommissiontransfer(fee: String, id: Int): Admincommissiontransfer
  updateAdminoptionfee(active: Boolean, id: Int, indexid: Int, modelsort: String, price: String, productamount: String, promotion: String): Adminoptionfee
  updateAdminsellerfiltering(contents: String, country: String, id: Int, market: String): Adminsellerfiltering
  updateChangepoint(checkstatus: String, id: Int): Changepoint
  updateCheckpoint(checkstatus: String, id: Int): Checkpoint
  updateConnectinfo(apiid: String, apikey: String, code: String, id: Int, shop: String, shopid: String): Connectinfo
  updateDeliveryfee(cntojp: String, cntokor: String, id: Int, indexid: Int, jptocn: String, jptokor: String, jptomal: String, kortocn: String, kortojp: String, kortomal: String, ustocn: String, ustojp: String, ustokor: String, ustomal: String): Deliveryfee
  updateDemandpoint(checkname: String, confirmAt: String, id: Int): Demandpoint
  updateExchangeRate(cntojp: String, cntokor: String, id: Int, indexid: Int, jptocn: String, jptokor: String, jptomal: String, kortocn: String, kortojp: String, kortomal: String, ustocn: String, ustojp: String, ustokor: String, ustomal: String): ExchangeRate
  updateMaxiplan(id: Int, malls: String, monthlycollecting: String, monthlyplanfee: String, monthlyplatformsfee: String, plan: String, platformsettingprice: String, productamount: String, productmanagingamount: String, settingfee: String, translatefee: String, update: String): Maxiplan
  updateMaxiplanoption(id: Int, productamount: String, update: String): Maxiplan
  updateOrder(id: Int, paidstatus: String): Ordermanageitems
  updatepassword(id: Int, password: String): AuthPayload
  updateProfile(avatar: String, bio: String, id: Int, location: String, website: String): Profile
  updateSellingprice(id: Int, price: String): Sellingprice
  updateStockhandling(id: Int, price: String, stock: String, stockdemand: String, widthrowdemand: String): Stockhandling
  updateuserdepositandpoint(deposit: String, id: Int, point: String): User
  updateuserdepost(deposit: String, id: Int): User
  updateUserProfile(bankaccount: String, bankname: String, businessnumber: String, contactemail: String, deposit: String, gsiid: String, id: Int, kakaoid: String, point: String): UserProfile
  updateUserProfiledepost(deposit: String, id: Int): UserProfile
  updateUserProfilepoint(id: Int, point: String): UserProfile
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Ordermanageitems {
  created_at: String
  createdAt: DateTime!
  id: Int!
  item_price: String
  keepingamount: String
  multiorder: String
  name: String
  paidstatus: String
  product_main_image: String
  productid: Int
  shipping_amount: String
  updated_at: String
  User: User
  userId: Int
  wholeamount: String
}

input OrdermanageitemsListRelationFilter {
  every: OrdermanageitemsWhereInput
  none: OrdermanageitemsWhereInput
  some: OrdermanageitemsWhereInput
}

input OrdermanageitemsWhereInput {
  AND: [OrdermanageitemsWhereInput!]
  created_at: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  item_price: StringNullableFilter
  keepingamount: StringNullableFilter
  multiorder: StringNullableFilter
  name: StringNullableFilter
  NOT: [OrdermanageitemsWhereInput!]
  OR: [OrdermanageitemsWhereInput!]
  paidstatus: StringNullableFilter
  product_main_image: StringNullableFilter
  productid: IntNullableFilter
  shipping_amount: StringNullableFilter
  updated_at: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
  wholeamount: StringNullableFilter
}

input OrdermanageitemsWhereUniqueInput {
  id: Int
}

type Paidproductlist {
  category: String
  createdAt: DateTime!
  discount: String
  id: Int!
  images: String
  keepingamount: String
  orderstatus: String
  price: String
  productid: Int
  shipping_amount: String
  title: String
  updated_at: String
  User: User
  userId: Int
  wholeamount: String
}

input PaidproductlistListRelationFilter {
  every: PaidproductlistWhereInput
  none: PaidproductlistWhereInput
  some: PaidproductlistWhereInput
}

input PaidproductlistWhereInput {
  AND: [PaidproductlistWhereInput!]
  category: StringNullableFilter
  createdAt: DateTimeFilter
  discount: StringNullableFilter
  id: IntFilter
  images: StringNullableFilter
  keepingamount: StringNullableFilter
  NOT: [PaidproductlistWhereInput!]
  OR: [PaidproductlistWhereInput!]
  orderstatus: StringNullableFilter
  price: StringNullableFilter
  productid: IntNullableFilter
  shipping_amount: StringNullableFilter
  title: StringNullableFilter
  updated_at: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
  wholeamount: StringNullableFilter
}

input PaidproductlistWhereUniqueInput {
  id: Int
}

type Privacypolicy {
  contents: String
  id: Int!
  userId: Int
}

input PrivacypolicyListRelationFilter {
  every: PrivacypolicyWhereInput
  none: PrivacypolicyWhereInput
  some: PrivacypolicyWhereInput
}

input PrivacypolicyWhereInput {
  AND: [PrivacypolicyWhereInput!]
  contents: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [PrivacypolicyWhereInput!]
  OR: [PrivacypolicyWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input PrivacypolicyWhereUniqueInput {
  id: Int
}

type Product {
  brand: String!
  category: String!
  createdAt: DateTime!
  description: String!
  discount: Int!
  id: Int!
  images: String!
  newproduct: String!
  price: Int!
  productpageId: Int
  sale: String!
  stock: String!
  title: String!
  type: String!
  userId: Int
  variants: String!
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

input ProductOrderByInput {
  brand: SortOrder
  category: SortOrder
  createdAt: SortOrder
  description: SortOrder
  discount: SortOrder
  id: SortOrder
  images: SortOrder
  newproduct: SortOrder
  price: SortOrder
  productpageId: SortOrder
  sale: SortOrder
  stock: SortOrder
  title: SortOrder
  type: SortOrder
  userId: SortOrder
  variants: SortOrder
}

type Productpage {
  id: Int!
  Product(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int, orderBy: [ProductOrderByInput!], where: ProductWhereInput): [Product!]!
  text: String!
}

input ProductpageWhereInput {
  AND: [ProductpageWhereInput!]
  id: IntFilter
  NOT: [ProductpageWhereInput!]
  OR: [ProductpageWhereInput!]
  Product: ProductListRelationFilter
  text: StringFilter
}

type Productupdate {
  id: Int!
  postfix: String
  prefix: String
  userId: Int
}

input ProductupdateListRelationFilter {
  every: ProductupdateWhereInput
  none: ProductupdateWhereInput
  some: ProductupdateWhereInput
}

input ProductupdateWhereInput {
  AND: [ProductupdateWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [ProductupdateWhereInput!]
  OR: [ProductupdateWhereInput!]
  postfix: StringNullableFilter
  prefix: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input ProductupdateWhereUniqueInput {
  id: Int
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  brand: StringFilter
  category: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  discount: IntFilter
  id: IntFilter
  images: StringFilter
  newproduct: StringFilter
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  price: IntFilter
  Productpage: ProductpageWhereInput
  productpageId: IntNullableFilter
  sale: StringFilter
  stock: StringFilter
  title: StringFilter
  type: StringFilter
  User: UserWhereInput
  userId: IntNullableFilter
  variants: StringFilter
}

input ProductWhereUniqueInput {
  id: Int
}

type Profile {
  avatar: String
  bio: String
  id: Int!
  location: String
  website: String
}

input ProfileListRelationFilter {
  every: ProfileWhereInput
  none: ProfileWhereInput
  some: ProfileWhereInput
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  avatar: StringNullableFilter
  bio: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  location: StringNullableFilter
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
  website: StringNullableFilter
}

input ProfileWhereUniqueInput {
  id: Int
}

type Query {
  Addmenuals: [Addmenual]
  Adminbasicmalls: [Adminbasicmall]
  Adminbasicplans: [Adminbasicplan]
  Adminoptionfeesbymodel(indexid: Int, modelsort: String): [Adminoptionfee]
  Adminsellerfilteringbyid(userId: Int): [Adminsellerfiltering]
  Changepoint: [Changepoint]
  Checkpoint: [Checkpoint]
  collectmarkets: [Admincollectmarket]
  collectnationmarkets: [Admincollectnation]
  Connectinfosbyid(shopid: String, userId: Int): [Connectinfo]
  createDemandpoint(bankaccount: String, checkname: String, checkstatus: String, image: String, price: String): Demandpoint
  deliveryfeesbyid(indexid: Int): [Deliveryfee]
  Demandpoint: [Demandpoint]
  exchangerates: [ExchangeRate]
  exchangeratesbyid(indexid: Int): [ExchangeRate]
  Maxiplans: [Maxiplan]
  me: User
  orders: [Ordermanageitems]
  ordersbyorderid(id: Int): [Ordermanageitems]
  ordersbyuserid(userId: Int): [Ordermanageitems]
  paidorderbyid(id: Int): [Paidproductlist]
  paidorders: [Paidproductlist]
  Privacypolicys: [Privacypolicy]
  product(id: Int): Product
  productpage(id: Int): Productpage
  Refundpolicys: [Refundpolicy]
  Stockhandlings: [Stockhandling]
  Stockhandlingsbyid(indexid: Int): [Stockhandling]
  Stockhandlingsbynation(productfrom: String): [Stockhandling]
  Termsanduses: [Termsanduse]
  tweet(id: Int): Tweet
  tweets: [Tweet]
  user(id: Int): User
  users: [User]
}

enum QueryMode {
  default
  insensitive
}

type Refundpolicy {
  contents: String
  id: Int!
  userId: Int
}

input RefundpolicyListRelationFilter {
  every: RefundpolicyWhereInput
  none: RefundpolicyWhereInput
  some: RefundpolicyWhereInput
}

input RefundpolicyWhereInput {
  AND: [RefundpolicyWhereInput!]
  contents: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [RefundpolicyWhereInput!]
  OR: [RefundpolicyWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input RefundpolicyWhereUniqueInput {
  id: Int
}

type Sellingprice {
  id: Int!
  mallname: String
  price: String
}

input SellingpriceListRelationFilter {
  every: SellingpriceWhereInput
  none: SellingpriceWhereInput
  some: SellingpriceWhereInput
}

input SellingpriceWhereInput {
  AND: [SellingpriceWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  mallname: StringNullableFilter
  NOT: [SellingpriceWhereInput!]
  OR: [SellingpriceWhereInput!]
  price: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input SellingpriceWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

type Stockhandling {
  createdAt: DateTime!
  id: Int!
  indexid: Int
  name: String
  price: String
  productfrom: String!
  productto: String!
  stock: String
  stockdemand: String
  stockimage: String
  User: User
  widthrowdemand: String
}

input StockhandlingListRelationFilter {
  every: StockhandlingWhereInput
  none: StockhandlingWhereInput
  some: StockhandlingWhereInput
}

input StockhandlingWhereInput {
  AND: [StockhandlingWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  indexid: IntNullableFilter
  name: StringNullableFilter
  NOT: [StockhandlingWhereInput!]
  OR: [StockhandlingWhereInput!]
  price: StringNullableFilter
  productfrom: StringFilter
  productto: StringFilter
  stock: StringNullableFilter
  stockdemand: StringNullableFilter
  stockimage: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
  widthrowdemand: StringNullableFilter
}

input StockhandlingWhereUniqueInput {
  id: Int
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Subid {
  id: Int!
  subid: String
}

input SubidListRelationFilter {
  every: SubidWhereInput
  none: SubidWhereInput
  some: SubidWhereInput
}

input SubidWhereInput {
  AND: [SubidWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [SubidWhereInput!]
  OR: [SubidWhereInput!]
  subid: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input SubidWhereUniqueInput {
  id: Int
}

type Termsanduse {
  contents: String
  id: Int!
  userId: Int
}

input TermsanduseListRelationFilter {
  every: TermsanduseWhereInput
  none: TermsanduseWhereInput
  some: TermsanduseWhereInput
}

input TermsanduseWhereInput {
  AND: [TermsanduseWhereInput!]
  contents: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [TermsanduseWhereInput!]
  OR: [TermsanduseWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input TermsanduseWhereUniqueInput {
  id: Int
}

type Tweet {
  author: User
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  content: String
  createdAt: DateTime!
  id: Int!
  likes(after: LikedTweetWhereUniqueInput, before: LikedTweetWhereUniqueInput, first: Int, last: Int): [LikedTweet!]!
}

input TweetListRelationFilter {
  every: TweetWhereInput
  none: TweetWhereInput
  some: TweetWhereInput
}

input TweetWhereInput {
  AND: [TweetWhereInput!]
  author: UserWhereInput
  authorId: IntNullableFilter
  comments: CommentListRelationFilter
  content: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  likes: LikedTweetListRelationFilter
  NOT: [TweetWhereInput!]
  OR: [TweetWhereInput!]
}

type User {
  Addmenual(after: AddmenualWhereUniqueInput, before: AddmenualWhereUniqueInput, first: Int, last: Int): [Addmenual!]!
  Adminbasicmall(after: AdminbasicmallWhereUniqueInput, before: AdminbasicmallWhereUniqueInput, first: Int, last: Int): [Adminbasicmall!]!
  Adminbasicplan(after: AdminbasicplanWhereUniqueInput, before: AdminbasicplanWhereUniqueInput, first: Int, last: Int): [Adminbasicplan!]!
  Admincollectcategory(after: AdmincollectcategoryWhereUniqueInput, before: AdmincollectcategoryWhereUniqueInput, first: Int, last: Int): [Admincollectcategory!]!
  Admincollectmarket(after: AdmincollectmarketWhereUniqueInput, before: AdmincollectmarketWhereUniqueInput, first: Int, last: Int): [Admincollectmarket!]!
  Admincollectnation(after: AdmincollectnationWhereUniqueInput, before: AdmincollectnationWhereUniqueInput, first: Int, last: Int): [Admincollectnation!]!
  Admincommissionfee(after: AdmincommissionfeeWhereUniqueInput, before: AdmincommissionfeeWhereUniqueInput, first: Int, last: Int): [Admincommissionfee!]!
  Admincommissionmarket(after: AdmincommissionmarketWhereUniqueInput, before: AdmincommissionmarketWhereUniqueInput, first: Int, last: Int): [Admincommissionmarket!]!
  Admincommissiontransfer(after: AdmincommissiontransferWhereUniqueInput, before: AdmincommissiontransferWhereUniqueInput, first: Int, last: Int): [Admincommissiontransfer!]!
  Adminoptionfee(after: AdminoptionfeeWhereUniqueInput, before: AdminoptionfeeWhereUniqueInput, first: Int, last: Int): [Adminoptionfee!]!
  Adminsellerfiltering(after: AdminsellerfilteringWhereUniqueInput, before: AdminsellerfilteringWhereUniqueInput, first: Int, last: Int): [Adminsellerfiltering!]!
  Changepoint(after: ChangepointWhereUniqueInput, before: ChangepointWhereUniqueInput, first: Int, last: Int): [Changepoint!]!
  Checkpoint(after: CheckpointWhereUniqueInput, before: CheckpointWhereUniqueInput, first: Int, last: Int): [Checkpoint!]!
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  Connectinfo(after: ConnectinfoWhereUniqueInput, before: ConnectinfoWhereUniqueInput, first: Int, last: Int): [Connectinfo!]!
  createdAt: DateTime!
  Deliveryfee(after: DeliveryfeeWhereUniqueInput, before: DeliveryfeeWhereUniqueInput, first: Int, last: Int): [Deliveryfee!]!
  Deliverymangeitems(after: DeliverymangeitemsWhereUniqueInput, before: DeliverymangeitemsWhereUniqueInput, first: Int, last: Int): [Deliverymangeitems!]!
  deposit: String!
  email: String!
  ExchangeRate(after: ExchangeRateWhereUniqueInput, before: ExchangeRateWhereUniqueInput, first: Int, last: Int): [ExchangeRate!]!
  Filtering(after: FilteringWhereUniqueInput, before: FilteringWhereUniqueInput, first: Int, last: Int): [Filtering!]!
  Following(after: FollowingWhereUniqueInput, before: FollowingWhereUniqueInput, first: Int, last: Int): [Following!]!
  id: Int!
  likedTweet(after: LikedTweetWhereUniqueInput, before: LikedTweetWhereUniqueInput, first: Int, last: Int): [LikedTweet!]!
  Maxiplan(after: MaxiplanWhereUniqueInput, before: MaxiplanWhereUniqueInput, first: Int, last: Int): [Maxiplan!]!
  name: String
  Ordermanageitems(after: OrdermanageitemsWhereUniqueInput, before: OrdermanageitemsWhereUniqueInput, first: Int, last: Int): [Ordermanageitems!]!
  Paidproductlist(after: PaidproductlistWhereUniqueInput, before: PaidproductlistWhereUniqueInput, first: Int, last: Int): [Paidproductlist!]!
  phonenumber: String!
  point: String!
  Privacypolicy(after: PrivacypolicyWhereUniqueInput, before: PrivacypolicyWhereUniqueInput, first: Int, last: Int): [Privacypolicy!]!
  Productupdate(after: ProductupdateWhereUniqueInput, before: ProductupdateWhereUniqueInput, first: Int, last: Int): [Productupdate!]!
  Profile(after: ProfileWhereUniqueInput, before: ProfileWhereUniqueInput, first: Int, last: Int): [Profile!]!
  Refundpolicy(after: RefundpolicyWhereUniqueInput, before: RefundpolicyWhereUniqueInput, first: Int, last: Int): [Refundpolicy!]!
  Sellingprice(after: SellingpriceWhereUniqueInput, before: SellingpriceWhereUniqueInput, first: Int, last: Int): [Sellingprice!]!
  Stockhandling(after: StockhandlingWhereUniqueInput, before: StockhandlingWhereUniqueInput, first: Int, last: Int): [Stockhandling!]!
  Subid(after: SubidWhereUniqueInput, before: SubidWhereUniqueInput, first: Int, last: Int): [Subid!]!
  Termsanduse(after: TermsanduseWhereUniqueInput, before: TermsanduseWhereUniqueInput, first: Int, last: Int): [Termsanduse!]!
  tweets: [Tweet!]!
  UserProfile(after: UserProfileWhereUniqueInput, before: UserProfileWhereUniqueInput, first: Int, last: Int): [UserProfile!]!
}

type UserProfile {
  bankaccount: String!
  bankname: String!
  businessnumber: String!
  contactemail: String!
  deposit: String!
  gsiid: String!
  id: Int!
  kakaoid: String!
  point: String!
}

input UserProfileListRelationFilter {
  every: UserProfileWhereInput
  none: UserProfileWhereInput
  some: UserProfileWhereInput
}

input UserProfileWhereInput {
  AND: [UserProfileWhereInput!]
  bankaccount: StringFilter
  bankname: StringFilter
  businessnumber: StringFilter
  contactemail: StringFilter
  createdAt: DateTimeFilter
  deposit: StringFilter
  gsiid: StringFilter
  id: IntFilter
  kakaoid: StringFilter
  NOT: [UserProfileWhereInput!]
  OR: [UserProfileWhereInput!]
  point: StringFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input UserProfileWhereUniqueInput {
  id: Int
}

input UserWhereInput {
  Addmenual: AddmenualListRelationFilter
  Adminbasicmall: AdminbasicmallListRelationFilter
  Adminbasicplan: AdminbasicplanListRelationFilter
  Admincollectcategory: AdmincollectcategoryListRelationFilter
  Admincollectmarket: AdmincollectmarketListRelationFilter
  Admincollectnation: AdmincollectnationListRelationFilter
  Admincommissionfee: AdmincommissionfeeListRelationFilter
  Admincommissionmarket: AdmincommissionmarketListRelationFilter
  Admincommissiontransfer: AdmincommissiontransferListRelationFilter
  Adminoptionfee: AdminoptionfeeListRelationFilter
  Adminsellerfiltering: AdminsellerfilteringListRelationFilter
  AND: [UserWhereInput!]
  Changepoint: ChangepointListRelationFilter
  Checkpoint: CheckpointListRelationFilter
  comments: CommentListRelationFilter
  Connectinfo: ConnectinfoListRelationFilter
  createdAt: DateTimeFilter
  Deliveryfee: DeliveryfeeListRelationFilter
  Deliverymangeitems: DeliverymangeitemsListRelationFilter
  deposit: StringFilter
  email: StringFilter
  ExchangeRate: ExchangeRateListRelationFilter
  Filtering: FilteringListRelationFilter
  Following: FollowingListRelationFilter
  id: IntFilter
  likedTweet: LikedTweetListRelationFilter
  Maxiplan: MaxiplanListRelationFilter
  name: StringNullableFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  Ordermanageitems: OrdermanageitemsListRelationFilter
  Paidproductlist: PaidproductlistListRelationFilter
  password: StringFilter
  phonenumber: StringFilter
  point: StringFilter
  Privacypolicy: PrivacypolicyListRelationFilter
  Product: ProductListRelationFilter
  Productupdate: ProductupdateListRelationFilter
  Profile: ProfileListRelationFilter
  Refundpolicy: RefundpolicyListRelationFilter
  Sellingprice: SellingpriceListRelationFilter
  Stockhandling: StockhandlingListRelationFilter
  Subid: SubidListRelationFilter
  Termsanduse: TermsanduseListRelationFilter
  tweets: TweetListRelationFilter
  UserProfile: UserProfileListRelationFilter
}
